usage: val.py [-h] [--data DATA] [--weights WEIGHTS [WEIGHTS ...]]
              [--batch-size BATCH_SIZE] [--imgsz IMGSZ]
              [--conf-thres CONF_THRES] [--iou-thres IOU_THRES] [--task TASK]
              [--device DEVICE] [--workers WORKERS] [--single-cls] [--augment]
              [--verbose] [--save-txt] [--save-hybrid] [--save-conf]
              [--save-json] [--project PROJECT] [--name NAME] [--exist-ok]
              [--half] [--dnn]

options:
  -h, --help            show this help message and exit
  --data DATA           dataset.yaml path
  --weights WEIGHTS [WEIGHTS ...]
                        model.pt path(s)
  --batch-size BATCH_SIZE
                        batch size
  --imgsz IMGSZ, --img IMGSZ, --img-size IMGSZ
                        inference size (pixels)
  --conf-thres CONF_THRES
                        confidence threshold
  --iou-thres IOU_THRES
                        NMS IoU threshold
  --task TASK           train, val, test, speed or study
  --device DEVICE       cuda device, i.e. 0 or 0,1,2,3 or cpu
  --workers WORKERS     max dataloader workers (per RANK in DDP mode)
  --single-cls          treat as single-class dataset
  --augment             augmented inference
  --verbose             report mAP by class
  --save-txt            save results to *.txt
  --save-hybrid         save label+prediction hybrid results to *.txt
  --save-conf           save confidences in --save-txt labels
  --save-json           save a COCO-JSON results file
  --project PROJECT     save to project/name
  --name NAME           save to project/name
  --exist-ok            existing project/name ok, do not increment
  --half                use FP16 half-precision inference
  --dnn                 use OpenCV DNN for ONNX inference
